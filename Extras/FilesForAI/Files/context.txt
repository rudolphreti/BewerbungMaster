<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\Error.razor>
@page "/Error"
@using System.Diagnostics

<PageTitle>Error</PageTitle>

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

@code{
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? RequestId { get; set; }
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized() =>
        RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\Home.razor>
@page "/"
@using BewerbungMasterApp.Components.Pages
@using BewerbungMasterApp.Components
@using BewerbungMasterApp.Interfaces
@using BewerbungMasterApp.Services
@inject JobEditService JobEditService
@inherits HomeBase
@rendermode InteractiveServer

<div class="container my-5" @onclick="JobEditService.ClearActiveEditField">
    <h3 class="text-center mb-4">Job Applications List</h3>

    @if (jobApplications == null)
    {
        <p class="text-center">Loading data...</p>
    }
    else if (jobApplications.Count == 0)
    {
        <p class="text-center">No applications available.</p>
    }
    else
    {
        <div class="table-responsive mx-auto" style="max-width: 100%;" @onclick:stopPropagation>
            <table class="table table-striped table-bordered table-hover">
                <thead class="table-dark">
                    <tr>
                        <th scope="col" class="text-center">#</th>
                        <th scope="col" class="text-center col-4">Position</th>
                        <th scope="col" class="text-center col-4">Company</th>
                        <th scope="col" class="text-center">URL</th>
                        <th scope="col" class="text-center col-3">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int index = 0; index < jobApplications.Count; index++)
                    {
                        var job = jobApplications[index];
                        var currentIndex = index;
                        <tr>
                            <td class="text-center">@(index + 1)</td>
                            <HomeEdit Job="job"
                                      OnUpdate="RefreshList"
                                      IsEditingPosition="@JobEditService.IsEditingPosition(currentIndex)"
                                      IsEditingCompany="@JobEditService.IsEditingCompany(currentIndex)"
                                      OnStartEditing="(field) => JobEditService.SetActiveEditField(currentIndex, field)"
                                      OnStopEditing="JobEditService.ClearActiveEditField" />
                            <td class="text-center">
                                <a href="@job.URL" target="_blank" class="btn btn-primary btn-sm">Link</a>
                            </td>
                            <td class="text-center">
                                <HomeDelete Job="job" OnDelete="RefreshList" />
                                <HomeMoveDown Job="job" OnMove="RefreshList" />
                                <HomeMessage Job="job" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\Home.razor.cs>
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Services;
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;

namespace BewerbungMasterApp.Components.Pages
{
    public partial class HomeBase : ComponentBase
    {
        [Inject]
        public IJsonService JsonService { get; set; } = default!;

        [Inject]
        public IJSRuntime JSRuntime { get; set; } = default!;

        [Inject]
        public ILogger<HomeBase> Logger { get; set; } = default!;

        protected List<JobApplication> jobApplications = [];

        protected override async Task OnInitializedAsync()
        {
            await RefreshList();
        }

        protected async Task RefreshList()
        {
            jobApplications = await JsonService.GetAllAsync<JobApplication>();
            StateHasChanged();
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeDelete.razor>
@inherits HomeDeleteBase

<button class="btn btn-danger btn-sm" @onclick="DeleteJobApplication">Delete</button>

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeDelete.razor.cs>
using Microsoft.AspNetCore.Components;
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Services;

namespace BewerbungMasterApp.Components
{
    public class HomeDeleteBase : ComponentBase
    {
        [Inject]
        protected IJsonService JsonService { get; set; } = default!;

        [Parameter]
        public JobApplication Job { get; set; } = default!;

        [Parameter]
        public EventCallback OnDelete { get; set; }

        protected async Task DeleteJobApplication()
        {
            var success = await JsonService.DeleteAsync<JobApplication>(Job.Id);
            if (success)
            {
                await OnDelete.InvokeAsync();
            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeEdit.razor>
@inherits HomeEditBase

<td class="text-center text-wrap">
    @if (IsEditingPosition)
    {
        <input @ref="positionInput"
               @bind="EditedPosition"
               @bind:event="oninput"
               @onfocusout="UpdatePosition"
               @onkeydown="HandleKeyDown"
        @onclick:stopPropagation
               style="width:100%" />
    }
    else
    {
        <span @onclick="StartEditingPosition">@Job.Position</span>
    }
</td>
<td class="text-center text-wrap">
    @if (IsEditingCompany)
    {
        <input @ref="companyInput"
               @bind="EditedCompany"
               @bind:event="oninput"
               @onfocusout="UpdateCompany"
               @onkeydown="HandleKeyDown"
        @onclick:stopPropagation
               style="width:100%" />
    }
    else
    {
        <span @onclick="StartEditingCompany">@Job.Company</span>
    }
</td>

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeEdit.razor.cs>
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Services;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;

namespace BewerbungMasterApp.Components
{
    public class HomeEditBase : ComponentBase
    {
        // Inject the JSON service for data operations
        [Inject] protected IJsonService JsonService { get; set; } = default!;

        // Parameters for component configuration and data binding
        [Parameter] public JobApplication Job { get; set; } = default!;
        [Parameter] public EventCallback OnUpdate { get; set; } = default!;
        [Parameter] public bool IsEditingPosition { get; set; }
        [Parameter] public bool IsEditingCompany { get; set; }
        [Parameter] public EventCallback<string> OnStartEditing { get; set; }
        [Parameter] public EventCallback OnStopEditing { get; set; } = default!;

        // Properties to hold edited values
        protected string EditedPosition { get; set; } = string.Empty;
        protected string EditedCompany { get; set; } = string.Empty; 

        // References to input elements for focus management
        protected ElementReference positionInput;
        protected ElementReference companyInput;

        // Update local edit fields when parameters change
        protected override void OnParametersSet()
        {
            EditedPosition = Job.Position;
            EditedCompany = Job.Company;
        }

        // Set focus to the active input field after rendering
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (IsEditingPosition)
            {
                await positionInput.FocusAsync();
            }
            else if (IsEditingCompany)
            {
                await companyInput.FocusAsync();
            }
        }

        // Update the position and save changes
        protected async Task UpdatePosition()
        {
            if (Job.Position != EditedPosition)
            {
                Job.Position = EditedPosition;
                await UpdateJob();
            }
            await OnStopEditing.InvokeAsync();
        }

        // Update the company and save changes
        protected async Task UpdateCompany()
        {
            if (Job.Company != EditedCompany)
            {
                Job.Company = EditedCompany;
                await UpdateJob();
            }
            await OnStopEditing.InvokeAsync();
        }

        // Save the updated job to the JSON service
        private async Task UpdateJob()
        {
            await JsonService.UpdateAsync(Job);
            await OnUpdate.InvokeAsync();
        }

        // Handle keyboard events (Enter to save, Escape to cancel)
        protected async Task HandleKeyDown(KeyboardEventArgs e)
        {
            if (e.Key == "Enter")
            {
                if (IsEditingPosition)
                    await UpdatePosition();
                else if (IsEditingCompany)
                    await UpdateCompany();
            }
            else if (e.Key == "Escape")
            {
                await OnStopEditing.InvokeAsync();
            }
        }

        // Start editing the position field
        protected async Task StartEditingPosition() => await OnStartEditing.InvokeAsync("position");

        // Start editing the company field
        protected async Task StartEditingCompany() => await OnStartEditing.InvokeAsync("company");
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeMessage.razor>
@inherits HomeMessageBase

<button class="btn btn-primary btn-sm" @onclick="CopyPersonalizedMessage">Message</button>

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeMessage.razor.cs>
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Services;
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;

namespace BewerbungMasterApp.Components
{
    public class HomeMessageBase : ComponentBase
    {
        [Inject]
        protected IJsonService JsonService { get; set; } = default!;

        [Inject]
        protected IJSRuntime JSRuntime { get; set; } = default!;

        [Parameter]
        public required JobApplication Job { get; set; }

        protected async Task CopyPersonalizedMessage()
        {
            var user = await JsonService.GetUserDataAsync();
            var message = $@"Sehr geehrte Damen und Herren,

als Antwort auf die Anzeige {Job.URL} für die Stelle {Job.Position} in Ihrem Unternehmen {Job.Company} sende ich Ihnen meine Bewerbungsunterlagen im Anhang.

Mit freundlichen Grüßen
{user.FirstName} {user.LastName}";

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeMoveDown.razor>
@inherits HomeMoveDownBase

<button class="btn btn-secondary btn-sm" @onclick="MoveJobApplicationToEnd">Down &#x2193;</button>

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Components\Pages\HomeMoveDown.razor.cs>
using Microsoft.AspNetCore.Components;
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Services;

namespace BewerbungMasterApp.Components
{
    public class HomeMoveDownBase : ComponentBase
    {
        [Inject]
        protected IJsonService JsonService { get; set; } = default!;

        [Parameter]
        public JobApplication Job { get; set; } = default!;

        [Parameter]
        public EventCallback OnMove { get; set; }

        protected async Task MoveJobApplicationToEnd()
        {
            var jobs = await JsonService.GetAllAsync<JobApplication>();
            var jobToMove = jobs.FirstOrDefault(j => j.Id == Job.Id);
            if (jobToMove != null)
            {
                jobs.Remove(jobToMove);
                jobs.Add(jobToMove);

                await JsonService.UpdateAllAsync(jobs);
                await OnMove.InvokeAsync();
            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IApplicationInitializationService.cs>
namespace BewerbungMasterApp.Interfaces
{
    public interface IApplicationInitializationService
    {
        Task InitializeAsync(IServiceProvider serviceProvider);
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IDeleteJobApplicationService.cs>
namespace BewerbungMasterApp.Interfaces
{
    public interface IDeleteJobApplicationService
    {
        Task<bool> DeleteJobApplicationAsync(Guid id);
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IFileManagementService.cs>
using System.Collections.Generic;
using System.Threading.Tasks;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Interfaces
{
    public interface IFileManagementService
    {
        void InitializeJobAppDocsDirectory();
        Task GenerateJobApplicationSetsAsync(List<JobApplication> jobApplications);
        void CopyJobApplicationFiles(string targetDirectoryPath, string cvLapSubFolderPath, User user);
    }
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IGetJobApplicationsService.cs>
using System.Threading.Tasks;
using System.Collections.Generic;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Interfaces
{
    public interface IGetJobApplicationsService
    {
        Task<List<JobApplication>> GetJobApplicationsAsync();
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IJsonService.cs>
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public interface IJsonService
    {
        Task<List<T>> GetAllAsync<T>();
        Task<T> GetByIdAsync<T>(Guid id) where T : class, new();
        Task<T> AddAsync<T>(T item) where T : class, new();
        Task<T> UpdateAsync<T>(T item) where T : class, new();
        Task<bool> DeleteAsync<T>(Guid id) where T : class, new();
        Task UpdateAllAsync<T>(List<T> items) where T : class, new();
        Task<User> GetUserDataAsync();
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Interfaces\IPdfGenerationService.cs>
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Interfaces
{
    public interface IPdfGenerationService
    {
        void GenerateCoverLetter(string outputPath, User user, JobApplication application);
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Models\JobApplication.cs>
using System.Text.Json.Serialization;

namespace BewerbungMasterApp.Models
{
    public class JobApplication
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("URL")]
        public string URL { get; set; } = string.Empty;

        [JsonPropertyName("position")]
        public string Position { get; set; } = string.Empty;

        [JsonPropertyName("company")]
        public string Company { get; set; } = string.Empty;

    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Models\User.cs>
namespace BewerbungMasterApp.Models
{
    public class User
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string ZipCode { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string LinkedIn { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string JobAppContent { get; set; } = string.Empty;
    }
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\ApplicationInitializationService.cs>
using BewerbungMasterApp.Interfaces;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public class ApplicationInitializationService(ILogger<ApplicationInitializationService> logger) : IApplicationInitializationService
    {
        private readonly ILogger<ApplicationInitializationService> _logger = logger;

        public async Task InitializeAsync(IServiceProvider serviceProvider)
        {
            using var scope = serviceProvider.CreateScope();
            var fileManagementService = scope.ServiceProvider.GetRequiredService<IFileManagementService>();
            var jsonService = scope.ServiceProvider.GetRequiredService<IJsonService>();

            try
            {
                // Initialize directories
                fileManagementService.InitializeJobAppDocsDirectory();

                // Fetch job applications
                var jobApplications = await jsonService.GetAllAsync<JobApplication>();
                _logger.LogInformation("Fetched {Count} job applications", jobApplications.Count);

                // Generate job application folders
                await fileManagementService.GenerateJobApplicationSetsAsync(jobApplications);
                _logger.LogInformation("Job application sets generation completed");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during initialization");
                throw; // Re-throw the exception to stop the application if necessary
            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementService.CopyFiles.cs>
using BewerbungMasterApp.Interfaces;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public partial class FileManagementService : IFileManagementService
    {
        public void CopyJobApplicationFiles(string targetDirectoryPath, string cvLapSubFolderPath, User user)
        {
            string[] filesToCopy = ["CV_Zeugnis.pdf", "profilfoto.jpg"];
            string[] filesToCopyToSubfolder = ["LAP-Zeugnis.pdf", "CV.pdf"];

            foreach (var fileName in filesToCopy)
            {
                string sourceFilePath = Path.Combine(_userDirectoryPath, fileName);
                string targetFilePath = Path.Combine(targetDirectoryPath, $"{user.FirstName}_{user.LastName}_{fileName}");
                if (File.Exists(sourceFilePath))
                {
                    File.Copy(sourceFilePath, targetFilePath, overwrite: true);
                }
            }

            foreach (var fileName in filesToCopyToSubfolder)
            {
                string sourceFilePath = Path.Combine(_userDirectoryPath, fileName);
                string targetFilePath = Path.Combine(cvLapSubFolderPath, $"{user.FirstName}_{user.LastName}_{fileName}");
                if (File.Exists(sourceFilePath))
                {
                    File.Copy(sourceFilePath, targetFilePath, overwrite: true);
                }
            }
        }
    }
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementService.cs>
using BewerbungMasterApp.Interfaces;

namespace BewerbungMasterApp.Services
{
    public partial class FileManagementService : IFileManagementService // change name to FileAndFoldersService
    {
        private readonly string _jobAppDocsPath;
        private readonly string _userDirectoryPath;
        private readonly IPdfGenerationService _pdfGenerationService;
        private readonly IJsonService _jsonService;
        private readonly ILogger<FileManagementService> _logger;
        public FileManagementService(IConfiguration configuration, IWebHostEnvironment environment, IPdfGenerationService pdfGenerationService, IJsonService jsonService, ILogger<FileManagementService> logger)
        {
            if (string.IsNullOrWhiteSpace(environment.WebRootPath))
                throw new InvalidOperationException("Web root path cannot be null or empty.");

            var userDirectoryPath = configuration["UserDirectoryPath"];
            if (string.IsNullOrWhiteSpace(userDirectoryPath))
                throw new InvalidOperationException("User directory path cannot be null or empty.");

            _jobAppDocsPath = Path.Combine(environment.WebRootPath, "JobAppDocs");
            _userDirectoryPath = Path.Combine(environment.WebRootPath, userDirectoryPath);
            _pdfGenerationService = pdfGenerationService;
            _jsonService = jsonService;
            _logger = logger;
        }

        public void InitializeJobAppDocsDirectory() //why must it be public, not internal?
        {
            if (string.IsNullOrWhiteSpace(_jobAppDocsPath))
                throw new InvalidOperationException("JobAppDocs path is invalid.");

            if (Directory.Exists(_jobAppDocsPath))
            {
                Directory.Delete(_jobAppDocsPath, true);
            }

            Directory.CreateDirectory(_jobAppDocsPath);
        }
    }
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementService.JobApllicationGenerator.cs>
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Interfaces;
namespace BewerbungMasterApp.Services
{
    public partial class FileManagementService : IFileManagementService
    {
        public async Task GenerateJobApplicationSetsAsync(List<JobApplication> jobApplications) //TODO: Unit test - if the number of folders matches the number of items
        {
            var user = await _jsonService.GetUserDataAsync();
            var folderApplicationMap = FileManagementServiceStatic.CreateFolderApplicationMap(jobApplications);

            foreach (var (uniqueFolderName, application) in folderApplicationMap)
            {
                string targetDirectoryPath = Path.Combine(_jobAppDocsPath, uniqueFolderName);
                string cvLapSubFolderPath = Path.Combine(targetDirectoryPath, "CV_LAP_separated");

                if (!Directory.Exists(targetDirectoryPath))
                {
                    FileManagementServiceStatic.CreateDirectories(targetDirectoryPath, cvLapSubFolderPath);
                    CopyJobApplicationFiles(targetDirectoryPath, cvLapSubFolderPath, user);

                    var fileName = $"{user.FirstName}_{user.LastName}_Bewerbungsschreiben.pdf";
                    try
                    {
                        _pdfGenerationService.GenerateCoverLetter(Path.Combine(targetDirectoryPath, fileName), user, application);
                        _logger.LogInformation("PDF generated: {FileName} for folder: {FolderName}", fileName, uniqueFolderName);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error generating PDF: {FileName} for folder: {FolderName}", fileName, uniqueFolderName);
                    }
                }
                else
                {
                    _logger.LogWarning("Folder already exists: {FolderName}", uniqueFolderName);
                }
            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementServiceStatic.cs>
namespace BewerbungMasterApp.Services
{
    public static partial class FileManagementServiceStatic
    {
    }
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementServiceStatic.Folders.cs>
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public partial class FileManagementServiceStatic
    {
        internal static List<string> CreateFolderNamesList(List<JobApplication> jobApplications)
        {
            List<string> uniqueFolderNames = [];

            for (int i = 0; i < jobApplications.Count; i++)
            {
                var application = jobApplications[i];
                string subFolderName = CleanName($"{application.Company}_{application.Position}");

                subFolderName = EnsureUniqueName(subFolderName, uniqueFolderNames);
                uniqueFolderNames.Add(subFolderName);
            }

            return uniqueFolderNames;
        }

        internal static void CreateDirectories(string targetDirectoryPath, string cvLapSubFolderPath) // to rename, "folders" not "directory"
        {
            Directory.CreateDirectory(targetDirectoryPath);
            Directory.CreateDirectory(cvLapSubFolderPath);
        }

        // Helper method to create a mapping from unique folder names to job applications
        internal static Dictionary<string, JobApplication> CreateFolderApplicationMap(List<JobApplication> jobApplications)
        {
            var folderApplicationMap = new Dictionary<string, JobApplication>();

            foreach (var application in jobApplications)
            {
                // Create a unique folder name based on the job application details
                string uniqueFolderName = FileManagementServiceStatic.CleanName($"{application.Company}_{application.Position}");

                // Ensure the folder name is unique
                uniqueFolderName = FileManagementServiceStatic.EnsureUniqueName(uniqueFolderName, [.. folderApplicationMap.Keys]);

                folderApplicationMap[uniqueFolderName] = application;
            }

            return folderApplicationMap;
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\FileManagementServiceStatic.NamesCorrectness.cs>
namespace BewerbungMasterApp.Services
{
    public partial class FileManagementServiceStatic // to refactor, simplyfy
    {
        public static string CleanName(string fileName)
        {
            char[] invalidChars = Path.GetInvalidFileNameChars();
            foreach (char c in invalidChars)
            {
                fileName = fileName.Replace(c, '_');
            }

            if (fileName.Length > 90)
            {
                fileName = fileName[..90];
            }

            // Removes only spaces at the end of the file name - IMPORTANT! without TrimEnd() the file or folder name is not created correctly
            fileName = fileName.TrimEnd();

            return fileName;
        }

        public static string EnsureUniqueName(string name, List<string> existingNames)
        {
            int count = 1;
            string uniqueName = name;

            while (existingNames.Contains(uniqueName))
            {
                uniqueName = $"{name}_{count}";
                count++;
            }

            return uniqueName;
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\JobEditService.cs>
namespace BewerbungMasterApp.Services
{
    public class JobEditService
    {
        private (int Index, string Field) ActiveEditField { get; set; } = (-1, string.Empty);

        public void SetActiveEditField(int index, string field)
        {
            ActiveEditField = (index, field);
        }

        public void ClearActiveEditField()
        {
            ActiveEditField = (-1, string.Empty);
        }

        public bool IsEditingPosition(int index)
        {
            return ActiveEditField.Index == index && ActiveEditField.Field == "position";
        }

        public bool IsEditingCompany(int index)
        {
            return ActiveEditField.Index == index && ActiveEditField.Field == "company";
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\JsonService.cs>
using System.Text.Json;
using System.Text.Encodings.Web;
using System.Text.Unicode;

namespace BewerbungMasterApp.Services
{
    public partial class JsonService : IJsonService
    {
        private readonly ILogger<JsonService> _logger;
        private readonly string _jobDataFilePath;
        private readonly string _userDataFilePath;
        private readonly JsonSerializerOptions _jsonOptions;

        public JsonService(ILogger<JsonService> logger, IConfiguration configuration, IWebHostEnvironment environment)
        {
            _logger = logger;
            var jobDataFileName = configuration["JobDataFile"] ?? throw new InvalidOperationException("JobDataFile configuration is missing");
            var userDirectoryPath = configuration["UserDirectoryPath"] ?? throw new InvalidOperationException("UserDirectoryPath configuration is missing");
            var userDataFileName = configuration["UserDataFile"] ?? throw new InvalidOperationException("UserDataFile configuration is missing");

            _jobDataFilePath = Path.Combine(environment.WebRootPath, jobDataFileName);
            _userDataFilePath = Path.Combine(environment.WebRootPath, userDirectoryPath, userDataFileName);

            _jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = JavaScriptEncoder.Create(UnicodeRanges.All),
                PropertyNameCaseInsensitive = true
            };
        }

        private async Task<List<T>> ReadJsonFileAsync<T>(string filePath)
        {
            if (!File.Exists(filePath))
            {
                return [];
            }

            var jsonString = await File.ReadAllTextAsync(filePath);
            return JsonSerializer.Deserialize<List<T>>(jsonString, _jsonOptions) ?? [];
        }

        private async Task WriteJsonFileAsync<T>(string filePath, List<T> items)
        {
            var jsonString = JsonSerializer.Serialize(items, _jsonOptions);
            await File.WriteAllTextAsync(filePath, jsonString);
        }

        public async Task<List<T>> GetAllAsync<T>()
        {
            try
            {
                return await ReadJsonFileAsync<T>(_jobDataFilePath);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error reading JSON file");
                throw;
            }
        }

        public async Task<T> GetByIdAsync<T>(Guid id) where T : class, new()
        {
            var items = await ReadJsonFileAsync<T>(_jobDataFilePath);
            return items.Find(item => (item as dynamic).Id == id) ?? new T();
        }

        public async Task<T> AddAsync<T>(T item) where T : class, new()
        {
            var items = await ReadJsonFileAsync<T>(_jobDataFilePath);
            items.Add(item);
            await WriteJsonFileAsync(_jobDataFilePath, items);
            return item;
        }

        public async Task<T> UpdateAsync<T>(T item) where T : class, new()
        {
            var items = await ReadJsonFileAsync<T>(_jobDataFilePath);
            var index = items.FindIndex(x => (x as dynamic).Id == (item as dynamic).Id);
            if (index != -1)
            {
                items[index] = item;
                await WriteJsonFileAsync(_jobDataFilePath, items);
                return item;
            }
            throw new KeyNotFoundException($"Item with ID {(item as dynamic).Id} not found.");
        }

        public async Task UpdateAllAsync<T>(List<T> items) where T : class, new()
        {
            try
            {
                await WriteJsonFileAsync(_jobDataFilePath, items);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating all items in JSON file");
                throw;
            }
        }

        public async Task<bool> DeleteAsync<T>(Guid id) where T : class, new()
        {
            var items = await ReadJsonFileAsync<T>(_jobDataFilePath);
            var removed = items.RemoveAll(x => (x as dynamic).Id == id);
            if (removed > 0)
            {
                await WriteJsonFileAsync(_jobDataFilePath, items);
                return true;
            }
            return false;
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\JsonService.User.cs>
using System.Text.Json;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public partial class JsonService
    {
        // User-specific methods
        public async Task<User> GetUserDataAsync()
        {
            if (!File.Exists(_userDataFilePath))
            {
                throw new FileNotFoundException($"User data file not found: {_userDataFilePath}");
            }

            var userJson = await File.ReadAllTextAsync(_userDataFilePath);
            return JsonSerializer.Deserialize<User>(userJson, _jsonOptions)
                ?? throw new InvalidOperationException("User data could not be loaded.");
        }

        public async Task UpdateUserDataAsync(User user)
        {
            var jsonString = JsonSerializer.Serialize(user, _jsonOptions);
            await File.WriteAllTextAsync(_userDataFilePath, jsonString);
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\PdfGenerationService.ContentProcessor.cs>
using System.Text.RegularExpressions;
using iText.Kernel.Font;
using iText.Layout.Element;
using iText.Kernel.Colors;
using iText.Kernel.Pdf.Action;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public partial class PdfGenerationService
    {
        private static string FillPlaceholders(string content, JobApplication application)
        {
            return content
                .Replace("{position}", application.Position)
                .Replace("{company}", application.Company)
                .Replace("\n", "\n\n");
        }

        private static Paragraph ProcessContentWithLinks(string text, PdfFont font, float fontSize)
        {
            Paragraph paragraph = new();
            string pattern = @"(https?://\S+[^.,;!?)\s]|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})([.,;!?)])?";
            MatchCollection matches = Regex.Matches(text, pattern);
            int lastIndex = 0;

            foreach (Match match in matches)
            {
                // Add text before the link or email
                string beforeMatch = text[lastIndex..match.Index];
                if (!string.IsNullOrEmpty(beforeMatch))
                {
                    paragraph.Add(new Text(beforeMatch).SetFont(font).SetFontSize(fontSize));
                }

                string fullMatch = match.Groups[1].Value;
                string punctuation = match.Groups[2].Value;

                // Determine if it's a URL or an email
                bool isUrl = fullMatch.StartsWith("http://") || fullMatch.StartsWith("https://");

                string displayText = fullMatch;
                if (isUrl)
                {
                    // Remove http:// or https:// from display URL
                    displayText = displayText.StartsWith("http://") ? displayText[7..] : displayText[8..];
                }

                // Add the link or email
                Text linkText = new Text(displayText)
                    .SetFont(font)
                    .SetFontSize(fontSize)
                    .SetFontColor(ColorConstants.BLUE);

                linkText.SetAction(isUrl ? PdfAction.CreateURI(fullMatch) : PdfAction.CreateURI("mailto:" + fullMatch));

                paragraph.Add(linkText);

                // Add punctuation after the link or email
                if (!string.IsNullOrEmpty(punctuation))
                {
                    paragraph.Add(new Text(punctuation).SetFont(font).SetFontSize(fontSize));
                }

                lastIndex = match.Index + match.Length;
            }

            // Add any remaining text after the last match
            if (lastIndex < text.Length)
            {
                string remainingText = text[lastIndex..];
                paragraph.Add(new Text(remainingText).SetFont(font).SetFontSize(fontSize));
            }

            return paragraph;
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\PdfGenerationService.CoverLetterMethods.cs>
using iText.Layout;
using iText.Layout.Element;
using iText.Kernel.Font;
using iText.Layout.Properties;
using iText.Layout.Hyphenation;
using BewerbungMasterApp.Models;

namespace BewerbungMasterApp.Services
{
    public partial class PdfGenerationService
    {
        private static void SetDocumentDefaults(Document document, PdfFont regularFont)
        {
            document.SetFont(regularFont).SetFontSize(10);
        }

        private static void AddHeader(Document document, User user)
        {
            AddParagraph(document, $"{user.FirstName} {user.LastName}", 0);
            AddParagraph(document, user.Address, 0);
            AddParagraph(document, $"{user.ZipCode} {user.City}", 0);
            AddParagraphWithLinks(document, user.Email, 0);
            if (!string.IsNullOrEmpty(user.LinkedIn))
            {
                AddParagraphWithLinks(document, user.LinkedIn, 0);
            }
            AddParagraph(document, $"Telefonnummer: {user.Phone}", 10);
        }

        private static void AddRecipient(Document document, string company)
        {
            AddParagraph(document, "An:", 0);
            AddParagraph(document, company, 0);
        }

        private static void AddDate(Document document, string city)
        {
            AddParagraph(document, $"{city}, {DateTime.Now:dd.MM.yyyy}", 10, TextAlignment.RIGHT);
        }

        private static void AddTitle(Document document, PdfFont boldFont, string position)
        {
            AddParagraph(document, $"Bewerbung als {position}", 20, TextAlignment.CENTER, 14, boldFont);
        }

        private static void AddGreeting(Document document)
        {
            AddParagraph(document, "Sehr geehrte Damen und Herren,", 10);
        }

        private static void AddMainContent(Document document, PdfFont regularFont, User user, JobApplication application)
        {
            string filledContent = FillPlaceholders(user.JobAppContent, application);
            Paragraph content = ProcessContentWithLinks(filledContent, regularFont, 11);
            content.SetTextAlignment(TextAlignment.JUSTIFIED);
            content
                .SetHyphenation(new HyphenationConfig("de", "DE", 2, 2))
                .SetMarginBottom(20);
            document.Add(content);
        }

        private static void AddClosing(Document document, User user)
        {
            AddParagraph(document, "Mit freundlichen Grüßen", 0);
            AddParagraph(document, $"{user.FirstName} {user.LastName}", 0);
        }

        private static void AddParagraph(Document document, string text, float marginBottom, TextAlignment alignment = TextAlignment.LEFT, float fontSize = 10, PdfFont? font = null)
        {
            var paragraph = new Paragraph(text)
                .SetMarginBottom(marginBottom)
                .SetTextAlignment(alignment)
                .SetFontSize(fontSize);

            if (font != null)
            {
                paragraph.SetFont(font);
            }

            document.Add(paragraph);
        }

        private static void AddParagraphWithLinks(Document document, string text, float marginBottom)
        {
            document.Add(ProcessContentWithLinks(text, GetRegularFont(), 10).SetMarginBottom(marginBottom));
        }

        private void VerifyFileCreation(string outputPath)
        {
            FileInfo fileInfo = new(outputPath);
            if (fileInfo.Exists && fileInfo.Length > 0)
            {
                _logger.LogInformation("Cover letter successfully created. Path: {OutputPath}", outputPath);
                _logger.LogInformation("Cover letter file size: {FileSize} bytes", fileInfo.Length);
            }
            else
            {
                _logger.LogWarning("Cover letter file created but empty or not found. Path: {OutputPath}", outputPath);
            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\PdfGenerationService.cs>
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Kernel.Font;
using iText.Kernel.Geom;
using BewerbungMasterApp.Models;
using BewerbungMasterApp.Interfaces;

namespace BewerbungMasterApp.Services
{
    public partial class PdfGenerationService(ILogger<PdfGenerationService> logger) : IPdfGenerationService
    {
        private readonly ILogger<PdfGenerationService> _logger = logger;

        public void GenerateCoverLetter(string outputPath, User user, JobApplication application)
        {
            _logger.LogInformation("Generating cover letter for {UserName}: {OutputPath}",
                $"{user.FirstName} {user.LastName}", outputPath);
            try
            {
                using var writer = new PdfWriter(outputPath);
                using var pdf = new PdfDocument(writer);
                using var document = new Document(pdf, PageSize.A4);

                PdfFont regularFont = GetRegularFont();
                PdfFont boldFont = GetBoldFont();

                SetDocumentDefaults(document, regularFont);

                AddHeader(document, user);
                AddRecipient(document, application.Company);
                AddDate(document, user.City);
                AddTitle(document, boldFont, application.Position);
                AddGreeting(document);
                AddMainContent(document, regularFont, user, application);
                AddClosing(document, user);

                VerifyFileCreation(outputPath);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating cover letter: {ErrorMessage}", ex.Message);

            }
        }
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Services\PdfGenerationService.FontProvider.cs>
using iText.Kernel.Font;
using iText.IO.Font.Constants;

namespace BewerbungMasterApp.Services
{
    public partial class PdfGenerationService
    {
        private static PdfFont GetRegularFont() => PdfFontFactory.CreateFont(StandardFonts.HELVETICA);

        private static PdfFont GetBoldFont() => PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\appsettings.Development.json>
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "BewerbungMasterApp": "Debug"
    }
  },
  "AllowedHosts": "*",
  "UserDirectoryPath": "Users\\miko",
  "JobDataFile": "Users\\miko\\data.json",
  "UserDataFile": "user.json"
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\appsettings.json>
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "UserDirectoryPath": "Users\\default",
  "JobDataFile": "Users\\default\\data.json",
  "AllowedHosts": "*"
}


<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMasterApp\Program.cs>
using BewerbungMasterApp.Components;
using BewerbungMasterApp.Interfaces;
using BewerbungMasterApp.Services;

namespace BewerbungMasterApp
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);
            // Add services to the container
            builder.Services.AddRazorComponents()
                .AddInteractiveServerComponents();

            // Configure SignalR for indefinite connection
            builder.Services.AddSignalR(options =>
            {
                options.ClientTimeoutInterval = TimeSpan.FromDays(1);
                options.KeepAliveInterval = TimeSpan.FromSeconds(10);
                options.HandshakeTimeout = TimeSpan.FromSeconds(30);
                options.MaximumReceiveMessageSize = 1024 * 1024; // 1 MB
            });

            // Configure Blazor Server options
            builder.Services.AddServerSideBlazor(options =>
            {
                options.DisconnectedCircuitRetentionPeriod = TimeSpan.FromDays(1);
                options.DisconnectedCircuitMaxRetained = 100;
                options.JSInteropDefaultCallTimeout = TimeSpan.FromMinutes(5);
                options.MaxBufferedUnacknowledgedRenderBatches = 100;
                options.DetailedErrors = true; // Enable detailed errors for development
            });

            // Set up configuration
            var config = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{builder.Environment.EnvironmentName}.json", optional: true, reloadOnChange: true)
                .Build();

            // Register configuration
            builder.Services.AddSingleton<IConfiguration>(config);

            // Register HttpClient for use in services
            builder.Services.AddHttpClient();

            // TODO: create a service (with a method with services and logging instructions)
            // Register application services
            builder.Services.AddSingleton<IFileManagementService, FileManagementService>();
            builder.Services.AddSingleton<IPdfGenerationService, PdfGenerationService>();
            builder.Services.AddSingleton<IJsonService, JsonService>();
            builder.Services.AddSingleton<IApplicationInitializationService, ApplicationInitializationService>();
            builder.Services.AddSingleton<JobEditService>();

            // Register the application logger
            builder.Logging.AddConfiguration(builder.Configuration.GetSection("Logging"));
            builder.Logging.AddConsole();
            builder.Logging.AddDebug();
            builder.Logging.SetMinimumLevel(LogLevel.Trace);  // F�gen Sie diese Zeile hinzu

            var app = builder.Build();

            // Configure the HTTP request pipeline
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Error");
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseRouting();
            app.UseAntiforgery();
            app.UseAuthorization();

            // Map Razor Components
            app.MapRazorComponents<App>()
                .AddInteractiveServerRenderMode();

            // Initialize application
            // Initialize application
            var initializationService = app.Services.GetRequiredService<IApplicationInitializationService>();
            await initializationService.InitializeAsync(app.Services);

            await app.RunAsync();
        }

        
    }
}

<D:\Visual Studio - Projects\BewerbungMaster\BewerbungMaster.sln>

Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.10.35027.167
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "BewerbungMasterApp", "BewerbungMasterApp\BewerbungMasterApp.csproj", "{49E387FD-F125-4A6C-A516-56435E7B25C5}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{49E387FD-F125-4A6C-A516-56435E7B25C5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{49E387FD-F125-4A6C-A516-56435E7B25C5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{49E387FD-F125-4A6C-A516-56435E7B25C5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{49E387FD-F125-4A6C-A516-56435E7B25C5}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {3D733680-13D6-4E04-B298-8AB401DA21F6}
	EndGlobalSection
EndGlobal


<D:\Visual Studio - Projects\BewerbungMaster\README.md>
# BewerbungMaster

BewerbungMaster is a Blazor application designed to efficiently create and manage job applications. 

![screenshot](screens/screen.png)

## Features
- Job application files generation (CVs, cover letters) from JSON data:
![screenshot](screens/screen2.png)
![screenshot](screens/screen3.png)
- Editing and deleting entries
- Moving entries to the end of the list
- Copying a message to an employer to the clipboard

## To-Do
- Adding entries manually

## Key Components and Architecture
### wwwroot Directory
- `JobAppDocs/`: Stores generated job application documents
- `Users/`: Contains user-specific document templates
- `data.json`: Stores job application data in JSON format

### Services
The `Services` directory contains the core business logic of the application:
- `FileManagementService.cs` and `FileManagementServiceStatic.cs`: File operations for job application documents
- `JsonService.cs`: Operations on the data.json and user.json files
- `PdfGenerationService.cs`: Generates PDF documents for job applications
- `ApplicationInitializationService.cs`: Methods running at startup, such as generating job application documents from json files

#### PdfGenerationService.cs
This service is responsible for generating PDF documents for job applications. It utilizes the iText7 library to create professional-looking PDFs with advanced features:

1. **iText7 Integration**: The service leverages iText7, a powerful PDF manipulation library, to create and modify PDF documents programmatically.

2. **Hyperlink Detection**: The service includes functionality to automatically detect URLs within the text content. When a URL is identified, it's converted into an active hyperlink in the generated PDF, enhancing the interactivity of the document.

3. **Syllable Hyphenation**: To improve the readability and layout of the generated PDFs, the service implements syllable hyphenation. This feature intelligently breaks words at appropriate syllable boundaries when necessary, ensuring a clean and professional appearance of the text, especially in narrow columns or justified text alignments.

4. **Dynamic Content Placement**: The service can dynamically position text, images, and other elements within the PDF, allowing for flexible and customizable document layouts.

5. **Font Management**: It handles various font styles and sizes, enabling rich text formatting in the generated PDFs.

These advanced features of the PdfGenerationService.cs contribute to creating polished, professional-looking job application documents that stand out to potential employers.

## Installation

Currently, only the source code is available. To set up the project:

1. Clone the repository
2. Open the solution in Visual Studio or your preferred IDE
3. Restore NuGet packages
4. Build the project

## Usage

1. Provide job data in the `data.json` file located in the `wwwroot/default` directory. Include the following information for each job application:
   - Id
   - URL
   - Position
   - Company

The `Crawlers` directory contains sample crawlers for extracting this data written in Python/Selenium.

2. You can create your own documents in the `Users` directory within `wwwroot`. Make sure to indicate this directory in the `appsetings.Development.json` file.

3. Run the application and use the interface to manage your job applications and generate documents.

## Dependencies

This project uses the following main dependencies:

- .NET 8.0
- itext7 (v8.0.5)
- itext7.bouncy-castle-adapter (v8.0.5) - doesn't work without it
- itext7.commons (v8.0.5)
- itext7.hyph (v8.0.5)

For a complete list of dependencies, please refer to the `BewerbungMasterApp.csproj` file.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Support

If you encounter any problems or have any questions, please open an issue in the GitHub repository.


