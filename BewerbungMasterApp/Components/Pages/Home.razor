@page "/"
@using BewerbungMasterApp.Components.Pages
@using BewerbungMasterApp.Models
@using BewerbungMasterApp.Services
@inject IJsonService JsonService
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<div class="container-fluid my-5">
    <RefreshButton OnRefreshCompleted="RefreshList" ShowWarning="@showWarning" />
    <AddJob OnJobAdded="HandleJobAdded" />
    <Search OnSearch="HandleSearch" />

    @if (jobApplications == null)
    {
        <p class="text-center">Loading data...</p>
    }
    else if (jobApplications.Count == 0)
    {
        <p class="text-center">No applications available.</p>
    }
    else
    {
        <JobApplicationTable JobApplications="filteredJobApplications"
                             JobAppContents="jobAppContents"
                             OnUpdate="HandleUpdate"
                             OnDelete="RefreshList"
                             OnMove="RefreshList" />
    }
</div>

@code {
    private List<JobApplication> jobApplications = new();
    private List<JobApplication> filteredJobApplications = new();
    private List<JobAppContent> jobAppContents = new();
    private bool showWarning = false;
    private Func<JobApplication, bool> currentFilter = _ => true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }

    private async Task RefreshList()
    {
        try
        {
            jobApplications = await JsonService.GetAllAsync<JobApplication>();
            ApplyFilter();
            jobAppContents = await JsonService.GetAllJobAppContentsAsync();
            showWarning = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing job applications list");
            // TODO: Add user notification of error
        }
    }

    private void HandleUpdate()
    {
        showWarning = true;
        StateHasChanged();
    }

    private async Task HandleJobAdded()
    {
        await RefreshList();
        showWarning = true;
        StateHasChanged();
    }

    private void HandleSearch(Func<JobApplication, bool> searchFilter)
    {
        currentFilter = searchFilter;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredJobApplications = jobApplications.Where(currentFilter).ToList();
        StateHasChanged();
    }
}