@inject IJSRuntime JSRuntime
@inject IJsonService JsonService
@using BewerbungMasterApp.Services
@using BewerbungMasterApp.Models
@using BewerbungMasterApp.Interfaces


<button title="Copy cover letter to clipboard" class="btn btn-outline-dark btn-sm" @onclick="CopyCoverLetterToClipboard">Cover letter 📋</button>

@code {
    [Parameter]
    public required JobApplication Job { get; set; }

    private async Task CopyCoverLetterToClipboard() //TODO: refactor, the method ist similar to GenerateCoverLetter from PDFService
    {
        var user = await JsonService.GetUserDataAsync();
        var jobAppContent = await JsonService.GetJobAppContentByNameAsync(Job.Type);

        if (jobAppContent == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Kein Inhalt für den Stellentyp '{Job.Type}' gefunden.");
            return;
        }

        var coverLetterContent = GenerateCoverLetterContent(user, Job, jobAppContent);
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", coverLetterContent);
    }

    private string GenerateCoverLetterContent(User user, JobApplication job, JobAppContent jobAppContent)
    {
        var linkedInLine = string.IsNullOrEmpty(user.LinkedIn) ? "" : user.LinkedIn + Environment.NewLine;
        var jobType = job.IsInitiative ? "Initiativbewerbung" : $"Bewerbung als {job.Position}";
        var content = $@"{user.FirstName} {user.LastName}
{user.Address}
{user.ZipCode} {user.City}
{user.Email}
{linkedInLine}
Telefonnummer: {user.Phone}

An:
{job.Company}

{user.City}, {DateTime.Now:dd.MM.yyyy}

{jobType}

Sehr geehrte Damen und Herren,

{FillPlaceholders(jobAppContent.Content, job)}

Mit freundlichen Grüßen
{user.FirstName} {user.LastName}";

        return content;
    }

    private string FillPlaceholders(string content, JobApplication application)
    {
        return content
            .Replace("{position}", application.Position)
            .Replace("{company}", application.Company)
            .Replace("\n", "\n\n");
    }
}