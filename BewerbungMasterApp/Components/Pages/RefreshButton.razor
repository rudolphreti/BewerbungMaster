@using BewerbungMasterApp.Interfaces
@using BewerbungMasterApp.Models
@using BewerbungMasterApp.Services
@inject IFileManagementService FileManagementService
@inject IJsonService JsonService
@inject ILogger<RefreshButton> Logger

<div class="d-flex align-items-center position-absolute top-0 end-0 m-3">
    @if (ShowWarning)
    {
        <div class="text-danger me-2">
            <strong>WARNING!</strong> Click to update job applications files!
        </div>
    }
    <button class="btn btn-primary" @onclick="RefreshJobApplicationFiles">
        🗘 Refresh Job Applications Files
    </button>
</div>

@code {
    [Parameter] public EventCallback OnRefreshCompleted { get; set; }
    [Parameter] public bool ShowWarning { get; set; }

    private async Task RefreshJobApplicationFiles()
    {
        try
        {
            Logger.LogInformation("Starting job applications refresh process");

            await RefreshJobApplicationSets();

            Logger.LogInformation("Job applications refresh process completed successfully");
            await OnRefreshCompleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while refreshing job applications");
            // TODO: Add user notification about the error
        }
    }

    private async Task RefreshJobApplicationSets()
    {
        FileManagementService.InitializeJobAppDocsDirectory();
        var jobApplications = await JsonService.GetAllAsync<JobApplication>();
        await FileManagementService.GenerateJobApplicationSetsAsync(jobApplications);
    }
}